
import java.awt.Color;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bibbo
 */
public class drawMusic extends javax.swing.JFrame {
    
    //Boolean enableBntpitchClassFrame = false;
    FileNameExtensionFilter filter = new FileNameExtensionFilter("Documenti IEEE 1599", "xml");
    JFileChooser openFileChoseer = new JFileChooser();
    ImageIcon trueIcon = new ImageIcon("icon\\green_check.png");
    ImageIcon falseIcon = new ImageIcon("icon\\red_cross.png");
    JButton startButton;
    /**
     * Creates new form drawMusic
     */
    public drawMusic() {
        initComponents();
        getContentPane().setBackground(Color.white);
        lockIcon();
        lockTextBox();
        openFileName.setText("Nessun file selezionato!");
    }
    
    public void lockIcon() {
        generatePitchClassButton.setEnabled(false);
        generatePitchButton.setEnabled(false);
        generateDurationButton.setEnabled(false);
        generateMelodicIntervalButton.setEnabled(false);
        generateHarmonicIntervalButton.setEnabled(false);
    }
    
    public void lockTextBox() {
        nomeGraficoTextField_1.setEnabled(false);
        nomeGraficoTextField_2.setEnabled(false);
        nomeGraficoTextField_3.setEnabled(false);
        nomeGraficoTextField_4.setEnabled(false);
        nomeGraficoTextField_5.setEnabled(false);
    }
    
    public void unLockIcon() {
        generatePitchClassButton.setEnabled(true);
        generatePitchButton.setEnabled(true);
        generateDurationButton.setEnabled(true);
        generateMelodicIntervalButton.setEnabled(true);
        generateHarmonicIntervalButton.setEnabled(true);
    }
    
    public void unLockTextBox() {
        nomeGraficoTextField_1.setEnabled(true);
        nomeGraficoTextField_2.setEnabled(true);
        nomeGraficoTextField_3.setEnabled(true);
        nomeGraficoTextField_4.setEnabled(true);
        nomeGraficoTextField_5.setEnabled(true);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        openFileButton = new javax.swing.JButton();
        selectedFile = new javax.swing.JLabel();
        generatePitchClassButton = new javax.swing.JButton();
        openFileName = new javax.swing.JLabel();
        nomeGraficoTextField_1 = new javax.swing.JTextField();
        pitchClassBntTitle = new javax.swing.JLabel();
        nomeGraficoStaticLabel_1 = new javax.swing.JLabel();
        generatePitchButton = new javax.swing.JButton();
        pitchBntTitle = new javax.swing.JLabel();
        nomeGraficoStaticLabel_2 = new javax.swing.JLabel();
        nomeGraficoTextField_2 = new javax.swing.JTextField();
        generateDurationButton = new javax.swing.JButton();
        durationBntTitle = new javax.swing.JLabel();
        nomeGraficoTextField_3 = new javax.swing.JTextField();
        nomeGraficoStaticLabel_3 = new javax.swing.JLabel();
        generateMelodicIntervalButton = new javax.swing.JButton();
        melodicIntervalBntTitle = new javax.swing.JLabel();
        nomeGraficoStaticLabel_4 = new javax.swing.JLabel();
        nomeGraficoTextField_4 = new javax.swing.JTextField();
        generateHarmonicIntervalButton = new javax.swing.JButton();
        harmonicIntervalBntTitle = new javax.swing.JLabel();
        nomeGraficoTextField_5 = new javax.swing.JTextField();
        nomeGraficoStaticLabel_5 = new javax.swing.JLabel();
        selectedFileIcon = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Music Data Extractor");
        setBackground(new java.awt.Color(255, 255, 255));

        openFileButton.setText("Apri File");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });

        selectedFile.setText("File Selezionato:");

        generatePitchClassButton.setForeground(new java.awt.Color(255, 255, 255));
        generatePitchClassButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\bar-chart-2.png")); // NOI18N
        generatePitchClassButton.setToolTipText("Genera grafico Pitch Class");
        generatePitchClassButton.setAlignmentY(0.0F);
        generatePitchClassButton.setMaximumSize(new java.awt.Dimension(48, 48));
        generatePitchClassButton.setMinimumSize(new java.awt.Dimension(48, 48));
        generatePitchClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePitchClassButtonActionPerformed(evt);
            }
        });

        openFileName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N

        nomeGraficoTextField_1.setToolTipText("Inserisci il nome del grafico");
        nomeGraficoTextField_1.setAlignmentX(0.0F);
        nomeGraficoTextField_1.setAlignmentY(0.0F);

        pitchClassBntTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pitchClassBntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pitchClassBntTitle.setText("Pitch Class");

        nomeGraficoStaticLabel_1.setText("Nome Grafico:");

        generatePitchButton.setForeground(new java.awt.Color(255, 255, 255));
        generatePitchButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\graphic.png")); // NOI18N
        generatePitchButton.setToolTipText("Genera grafico Pitch");
        generatePitchButton.setAlignmentY(0.0F);
        generatePitchButton.setMaximumSize(new java.awt.Dimension(48, 48));
        generatePitchButton.setMinimumSize(new java.awt.Dimension(48, 48));
        generatePitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePitchButtonActionPerformed(evt);
            }
        });

        pitchBntTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        pitchBntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pitchBntTitle.setText("Pitch");

        nomeGraficoStaticLabel_2.setText("Nome Grafico:");

        nomeGraficoTextField_2.setToolTipText("Inserisci il nome del grafico");

        generateDurationButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        generateDurationButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\bar-chart.png")); // NOI18N
        generateDurationButton.setToolTipText("Genera grafico Durate");
        generateDurationButton.setAlignmentY(0.0F);
        generateDurationButton.setMaximumSize(new java.awt.Dimension(48, 48));
        generateDurationButton.setMinimumSize(new java.awt.Dimension(48, 48));
        generateDurationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateDurationButtonActionPerformed(evt);
            }
        });

        durationBntTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        durationBntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        durationBntTitle.setText("Duration");

        nomeGraficoTextField_3.setToolTipText("Inserisci il nome del grafico");

        nomeGraficoStaticLabel_3.setText("Nome Grafico:");

        generateMelodicIntervalButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\pyramid-chart.png")); // NOI18N
        generateMelodicIntervalButton.setToolTipText("Genera grafico Intervalli Melodici");
        generateMelodicIntervalButton.setAlignmentY(0.0F);
        generateMelodicIntervalButton.setMaximumSize(new java.awt.Dimension(48, 48));
        generateMelodicIntervalButton.setMinimumSize(new java.awt.Dimension(48, 48));
        generateMelodicIntervalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateMelodicIntervalButtonActionPerformed(evt);
            }
        });

        melodicIntervalBntTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        melodicIntervalBntTitle.setText("Melodic Interval");
        melodicIntervalBntTitle.setAlignmentY(0.0F);

        nomeGraficoStaticLabel_4.setText("Nome Grafico:");

        nomeGraficoTextField_4.setToolTipText("Inserisci il nome del grafico");
        nomeGraficoTextField_4.setAlignmentX(0.0F);
        nomeGraficoTextField_4.setAlignmentY(0.0F);

        generateHarmonicIntervalButton.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\line-chart-4.png")); // NOI18N
        generateHarmonicIntervalButton.setToolTipText("Genera grafico Intervalli Armonici");
        generateHarmonicIntervalButton.setAlignmentY(0.0F);
        generateHarmonicIntervalButton.setMaximumSize(new java.awt.Dimension(48, 48));
        generateHarmonicIntervalButton.setMinimumSize(new java.awt.Dimension(48, 48));
        generateHarmonicIntervalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateHarmonicIntervalButtonActionPerformed(evt);
            }
        });

        harmonicIntervalBntTitle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        harmonicIntervalBntTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        harmonicIntervalBntTitle.setText("Harmonic Interval");
        harmonicIntervalBntTitle.setAlignmentY(0.0F);

        nomeGraficoTextField_5.setToolTipText("Inserisci il nome del grafico");
        nomeGraficoTextField_5.setAlignmentX(0.0F);
        nomeGraficoTextField_5.setAlignmentY(0.0F);

        nomeGraficoStaticLabel_5.setText("Nome Grafico:");

        selectedFileIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\Giuseppe\\Documents\\NetBeansProjects\\Progetto Java\\drawMusic\\drawMusic\\icon\\red_cross.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectedFileIcon)
                        .addGap(12, 12, 12)
                        .addComponent(selectedFile)
                        .addGap(20, 20, 20)
                        .addComponent(openFileName))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(generatePitchClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(pitchClassBntTitle))
                                    .addComponent(nomeGraficoStaticLabel_1))
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomeGraficoStaticLabel_2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(pitchBntTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(generatePitchButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nomeGraficoTextField_1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(nomeGraficoTextField_2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(durationBntTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(generateDurationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(nomeGraficoStaticLabel_3))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(nomeGraficoStaticLabel_4)
                                            .addComponent(generateMelodicIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(54, 54, 54)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(generateHarmonicIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(nomeGraficoStaticLabel_5)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(46, 46, 46)
                                        .addComponent(melodicIntervalBntTitle)
                                        .addGap(42, 42, 42)
                                        .addComponent(harmonicIntervalBntTitle)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(nomeGraficoTextField_3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(nomeGraficoTextField_4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(nomeGraficoTextField_5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(openFileButton)
                            .addComponent(selectedFile)
                            .addComponent(openFileName)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(selectedFileIcon)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(melodicIntervalBntTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(harmonicIntervalBntTitle))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pitchClassBntTitle)
                        .addComponent(pitchBntTitle)
                        .addComponent(durationBntTitle)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generatePitchClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generatePitchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateDurationButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateMelodicIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateHarmonicIntervalButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nomeGraficoStaticLabel_3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nomeGraficoStaticLabel_1)
                        .addComponent(nomeGraficoStaticLabel_2)
                        .addComponent(nomeGraficoStaticLabel_4)
                        .addComponent(nomeGraficoStaticLabel_5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeGraficoTextField_1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeGraficoTextField_2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeGraficoTextField_3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeGraficoTextField_4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeGraficoTextField_5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {                                               
        openFileChoseer.setFileFilter(filter);        
        openFileChoseer.setDialogTitle("Open File");
        String[] fileterExt = filter.getExtensions();
        if (openFileChoseer.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File f = openFileChoseer.getSelectedFile();
            if (f == null)
            {
                lockIcon();
                lockTextBox();
                openFileName.setText("Nessun file selezionato!");
                JOptionPane.showMessageDialog(null, "File selezionato non esistente!", "Error", JOptionPane.ERROR_MESSAGE);
            }      
            else if(f.exists())
            {
                String name = f.getName();
                String extension = name.substring(name.length()-3,name.length());
                selectedFileIcon.setIcon(trueIcon);  
                openFileName.setText(name);
                //enableBntpitchClassFrame = true;
                unLockIcon();
                unLockTextBox();
                if(!fileterExt[0].equals(extension))
                {
                    lockIcon();
                    lockTextBox();
                    selectedFileIcon.setIcon(falseIcon);
                    openFileName.setText("File selezionato non riconosciuto!");
                    JOptionPane.showMessageDialog(null, "Attenzione estenzione del file non valida! Selezionare file ."+fileterExt[0], "Error", JOptionPane.ERROR_MESSAGE);
                }      
            }        
        }
    }                                              

    private void generatePitchClassButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        try
        {   
            int dataSize = 0;
            pitchClassFrame pitchClassFrame = new pitchClassFrame(openFileChoseer.getSelectedFile().getName());
            dataSize = pitchClassFrame.getInputDataSize();
            if(dataSize > 0)
            {
                generatePitchClassButton.setEnabled(false);
                nomeGraficoTextField_1.setEnabled(false);
                pitchClassFrame.showUI();
            }
            
            String graphName = nomeGraficoTextField_1.getText();
            if(!graphName.equals("") && !graphName.equals(null))
                pitchClassFrame.setGraphName(graphName);
            else
                pitchClassFrame.setGraphName("Default Graph Name");
            pitchClassFrame.addWindowListener(new java.awt.event.WindowAdapter()
            {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    Object[] options = {"Si","No"};
                    int state = JOptionPane.showOptionDialog(pitchClassFrame, 
                                "Sei sicuro di voler chiudere questa finestra?",
                                "Chiudi Finestra?", 
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE, null, options, null);
                    if(state == JOptionPane.YES_OPTION)
                    {
                        windowEvent.getWindow().dispose();
                        generatePitchClassButton.setEnabled(true);
                        nomeGraficoTextField_1.setEnabled(true);
                        nomeGraficoTextField_1.setText("");
                    }
                }
            });   
        }
        catch(Exception e)
        {
            String informationMessage = "Non sono presenti dati da elaborare!";
            JOptionPane.showMessageDialog(null, informationMessage, "Informazione", JOptionPane.INFORMATION_MESSAGE);
        }
    }                                                        

    private void generatePitchButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        try
        {   
            int dataSize = 0;
            pitchFrame pitchFrame = new pitchFrame(openFileChoseer.getSelectedFile().getName());
            dataSize = pitchFrame.getInputDataSize();
            
            if(dataSize > 0)
            {
                generatePitchButton.setEnabled(false);
                nomeGraficoTextField_2.setEnabled(false);
                pitchFrame.showUI();
            }
            
            String graphName = nomeGraficoTextField_2.getText();
            if(!graphName.equals("") && !graphName.equals(null))
                pitchFrame.setGraphName(graphName);
            else
                pitchFrame.setGraphName("Default Graph Name");
            pitchFrame.addWindowListener(new java.awt.event.WindowAdapter()
            {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    Object[] options = {"Si","No"};
                    int state = JOptionPane.showOptionDialog(pitchFrame, 
                                "Sei sicuro di voler chiudere questa finestra?",
                                "Chiudi Finestra?", 
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE, null, options, null);
                    if(state == JOptionPane.YES_OPTION)
                    {
                        windowEvent.getWindow().dispose();
                        generatePitchButton.setEnabled(true);
                        nomeGraficoTextField_2.setEnabled(true);
                        nomeGraficoTextField_2.setText("");
                    }
                }
            });      
        }
        catch(Exception e)
        {
            String informationMessage = "Non sono presenti dati da elaborare!";
            JOptionPane.showMessageDialog(null, informationMessage, "Informazione", JOptionPane.INFORMATION_MESSAGE);
        }
    }                                                   

    private void generateDurationButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        /*
        try
        {   
            int dataSize = 0;
            durationFrame durationFrame = new durationFrame(openFileChoseer.getSelectedFile().getName());
            dataSize = durationFrame.getInputDataSize();
            
            if(dataSize > 0)
            {
                generateDurationButton.setEnabled(false);
                nomeGraficoTextField_3.setEnabled(false);
                durationFrame.showUI();
            }
            
            String graphName = nomeGraficoTextField_3.getText();
            if(!graphName.equals("") && !graphName.equals(null))
                durationFrame.setGraphName(graphName);
            else
                durationFrame.setGraphName("Default Graph Name");
            durationFrame.addWindowListener(new java.awt.event.WindowAdapter()
            {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    Object[] options = {"Si","No"};
                    int state = JOptionPane.showOptionDialog(durationFrame, 
                                "Sei sicuro di voler chiudere questa finestra?",
                                "Chiudi Finestra?", 
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE, null, options, null);
                    if(state == JOptionPane.YES_OPTION)
                    {
                        windowEvent.getWindow().dispose();
                        generateDurationButton.setEnabled(true);
                        nomeGraficoTextField_3.setEnabled(true);
                        nomeGraficoTextField_3.setText("");
                    }
                }
            });       
        }
        catch(Exception e)
        {
            String informationMessage = "Non sono presenti dati da elaborare!";
            JOptionPane.showMessageDialog(null, informationMessage, "Informazione", JOptionPane.INFORMATION_MESSAGE);
        }*/
    }                                                      

    private void generateMelodicIntervalButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        /*
        try
        {   
            int dataSize = 0;
            melodicIntervalFrame melodicIntervalFrame = new melodicIntervalFrame(openFileChoseer.getSelectedFile().getName());
            dataSize = melodicIntervalFrame.getInputDataSize();
            
            if(dataSize > 0)
            {
                generateMelodicIntervalButton.setEnabled(false);
                nomeGraficoTextField_4.setEnabled(false);
                melodicIntervalFrame.showUI();
            }
            
            String graphName = nomeGraficoTextField_4.getText();
            if(!graphName.equals("") && !graphName.equals(null))
                melodicIntervalFrame.setGraphName(graphName);
            else
                melodicIntervalFrame.setGraphName("Default Graph Name");
            melodicIntervalFrame.addWindowListener(new java.awt.event.WindowAdapter()
            {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    Object[] options = {"Si","No"};
                    int state = JOptionPane.showOptionDialog(melodicIntervalFrame, 
                                "Sei sicuro di voler chiudere questa finestra?",
                                "Chiudi Finestra?", 
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE, null, options, null);
                    if(state == JOptionPane.YES_OPTION)
                    {
                        windowEvent.getWindow().dispose();
                        generateMelodicIntervalButton.setEnabled(true);
                        nomeGraficoTextField_4.setEnabled(true);
                        nomeGraficoTextField_4.setText("");
                    }
                }
            });         
        }
        catch(Exception e)
        {
            String informationMessage = "Non sono presenti dati da elaborare!";
            JOptionPane.showMessageDialog(null, informationMessage, "Informazione", JOptionPane.INFORMATION_MESSAGE);
        } */      
    }                                                             

    private void generateHarmonicIntervalButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        /*
        try
        {   
            int dataSize = 0;
            harmonicIntervalFrame harmonicIntervalFrame = new harmonicIntervalFrame(openFileChoseer.getSelectedFile().getName());
            dataSize = harmonicIntervalFrame.getInputDataSize();
            
            if(dataSize > 0)
            {
                harmonicIntervalFrame.showUI();
                generateHarmonicIntervalButton.setEnabled(false);
                nomeGraficoTextField_5.setEnabled(false);
            }        
           
            String graphName = nomeGraficoTextField_5.getText();           
            if(!graphName.equals("") && !graphName.equals(null))
                harmonicIntervalFrame.setGraphName(graphName);
            else
                harmonicIntervalFrame.setGraphName("Default Graph Name");
            
            harmonicIntervalFrame.addWindowListener(new java.awt.event.WindowAdapter()
            {
                @Override
                public void windowClosing(java.awt.event.WindowEvent windowEvent)
                {
                    Object[] options = {"Si","No"};
                    int state = JOptionPane.showOptionDialog(harmonicIntervalFrame, 
                                "Sei sicuro di voler chiudere questa finestra?",
                                "Chiudi Finestra?", 
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.INFORMATION_MESSAGE, null, options, null);
                    if(state == JOptionPane.YES_OPTION)
                    {
                        windowEvent.getWindow().dispose();
                        generateHarmonicIntervalButton.setEnabled(true);
                        nomeGraficoTextField_5.setEnabled(true);
                        nomeGraficoTextField_5.setText("");
                    }
                }
            });            
        }
        catch(Exception e)
        {
            String informationMessage = "Non sono presenti dati da elaborare!";
            JOptionPane.showMessageDialog(null, informationMessage, "Informazione", JOptionPane.INFORMATION_MESSAGE);
        }*/
    }                                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(drawMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(drawMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(drawMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(drawMusic.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new drawMusic().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JLabel durationBntTitle;
    private javax.swing.JButton generateDurationButton;
    private javax.swing.JButton generateHarmonicIntervalButton;
    private javax.swing.JButton generateMelodicIntervalButton;
    private javax.swing.JButton generatePitchButton;
    private javax.swing.JButton generatePitchClassButton;
    private javax.swing.JLabel harmonicIntervalBntTitle;
    private javax.swing.JLabel melodicIntervalBntTitle;
    private javax.swing.JLabel nomeGraficoStaticLabel_1;
    private javax.swing.JLabel nomeGraficoStaticLabel_2;
    private javax.swing.JLabel nomeGraficoStaticLabel_3;
    private javax.swing.JLabel nomeGraficoStaticLabel_4;
    private javax.swing.JLabel nomeGraficoStaticLabel_5;
    private javax.swing.JTextField nomeGraficoTextField_1;
    private javax.swing.JTextField nomeGraficoTextField_2;
    private javax.swing.JTextField nomeGraficoTextField_3;
    private javax.swing.JTextField nomeGraficoTextField_4;
    private javax.swing.JTextField nomeGraficoTextField_5;
    private javax.swing.JButton openFileButton;
    private javax.swing.JLabel openFileName;
    private javax.swing.JLabel pitchBntTitle;
    private javax.swing.JLabel pitchClassBntTitle;
    private javax.swing.JLabel selectedFile;
    private javax.swing.JLabel selectedFileIcon;
    // End of variables declaration                   
}
